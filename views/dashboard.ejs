<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Driver Tracker Dashboard</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 min-h-screen">


  <div class="flex flex-col md:flex-row max-w-6xl mx-auto p-6 space-y-6 md:space-y-0 md:space-x-6">



    <!-- Left: Driver List -->
    <div class="w-full md:w-1/3 bg-white shadow rounded-lg p-4 overflow-y-auto h-[calc(100vh-4rem)]" id="driverList">
      <h2 class="text-xl font-semibold mb-4">Drivers</h2>

      <input id="driverSearch" type="text" placeholder="Search driver..." class="w-full mb-4 p-2 border rounded" oninput="filterDrivers()" />

      <% drivers.forEach(driver => { %>
        <div class="border rounded p-3 mb-4 driver-card" data-name="<%= driver.name.toLowerCase() %>" id="driverBox-<%= driver.name.replace(/\s+/g, '-') %>">
          <p class="font-bold mb-1"><%= driver.name %></p>
          <p class="text-sm text-gray-600">Location: <%= driver.location %></p>
          <p class="text-sm text-gray-600">Last updated: <%= driver.reported_at %></p>
          <% if (driver.trackingUrl) { %>

            <div class="flex justify-between items-center mt-2">
               <!-- Left: Buttons -->
              <div class="flex space-x-2">
                <button onclick="copyDriverLink('<%= driver.trackingUrl %>')" class="text-xs bg-blue-500 hover:bg-blue-600 text-white px-2 py-1 rounded">Copy</button>
                <button onclick="window.open('<%= driver.trackingUrl %>', '_blank')" class="text-xs bg-indigo-500 hover:bg-indigo-600 text-white px-2 py-1 rounded">Open</button>
                <button onclick="cancelDriverLink('<%= driver.name %>')" class="text-xs bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded">Cancel</button>
              </div>
               <!-- Right: Countdown -->
              <% if (driver.expiresAt) { %>
  <p class="text-xs text-gray-500 ml-2 whitespace-nowrap" data-expiry="<%= driver.expiresAt.toDate ? driver.expiresAt.toDate().toISOString() : driver.expiresAt %>">
    Expires in: <span class="countdown">...</span>
  </p>
<% } %>

            </div>
          <% } else { %>
            <p class="text-sm text-gray-500 mt-2 italic">No tracking link</p>
          <% } %>
        </div>
      <% }) %>
    </div>

    <!-- Right: Link Generator -->
    <div class="w-full md:w-2/3 bg-white shadow rounded-lg p-6">
        <!-- Logout button at top-right of this panel -->
  <div class="flex justify-end mb-2">
    <form action="/logout" method="GET">
      <button
        type="submit"
        class="bg-red-500 hover:bg-red-600 text-white text-sm font-medium py-1.5 px-3 rounded"
      >
        Logout
      </button>
    </form>
  </div>

      <h2 class="text-xl font-semibold mb-4">Generate Tracking Link</h2>
      <form id="generateLinkForm">
        <label class="block mb-4">
          <span class="text-gray-700">Select Driver:</span>
          <select id="driverName" name="driverName" required class="mt-1 block w-full border p-2 rounded">
            <% drivers.forEach(driver => { %>
              <option value="<%= driver.name %>"><%= driver.name %></option>
            <% }) %>
          </select>
        </label>

        <label class="block mb-4">
          <span class="text-gray-700">Expires in:</span>
          <select id="expirationHours" name="expirationHours" required class="mt-1 block w-full border p-2 rounded">
            <option value="24">24 hours</option>
            <option value="48">2 days</option>
            <option value="72">3 days</option>
            <option value="96">4 days</option>
            <option value="120">5 days</option>
            <option value="144">6 days</option>
            <option value="168">7 days</option>
          </select>
        </label>

        <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded">
          Generate Tracking Link
        </button>
      </form>

      <!-- Message area -->
      <div id="messageArea" class="mt-6 hidden">
        <div id="trackingMessage" class="bg-green-100 border border-green-400 text-green-800 px-4 py-3 rounded shadow">
          <p>Tracking link created for <strong id="driverNameDisplay"></strong>.</p>
          <div class="flex space-x-2 mt-2">
            <button id="copyButton" class="text-xs bg-blue-500 hover:bg-blue-600 text-white px-2 py-1 rounded">Copy</button>
            <button id="openButton" class="text-xs bg-indigo-500 hover:bg-indigo-600 text-white px-2 py-1 rounded">Open</button>
            <button id="cancelButton" class="text-xs bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded">Cancel</button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    let currentTrackingUrl = null;
    let currentDriverName = null;

    document.getElementById('generateLinkForm').addEventListener('submit', async (e) => {
      e.preventDefault();

      const driverName = document.getElementById('driverName').value;
      const expirationHours = document.getElementById('expirationHours').value;

      const response = await fetch('/generate-link', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ driverName, expirationHours })
      });

      const data = await response.json();

      const messageArea = document.getElementById('messageArea');
      const trackingMessage = document.getElementById('trackingMessage');
      const driverNameDisplay = document.getElementById('driverNameDisplay');

      if (data.success) {
        currentDriverName = data.driverName;
        currentTrackingUrl = data.trackingUrl;
        driverNameDisplay.textContent = currentDriverName;
        messageArea.classList.remove('hidden');

        document.getElementById('copyButton').onclick = () => copyDriverLink(currentTrackingUrl);
        document.getElementById('openButton').onclick = () => window.open(currentTrackingUrl, '_blank');
        document.getElementById('cancelButton').onclick = () => cancelDriverLink(currentDriverName);

        updateDriverBox(data.driverName, data.trackingUrl, data.expiresAt);
      } else {
        trackingMessage.innerHTML = `<p class="text-red-700">‚ùå ${data.error || 'Something went wrong.'}</p>`;
        messageArea.classList.remove('hidden');
        currentTrackingUrl = null;
      }
    });

    function copyDriverLink(url) {
      navigator.clipboard.writeText(url)
        .then(() => alert('Copied to clipboard!'))
        .catch(err => alert('Copy failed: ' + err));
    }

    function cancelDriverLink(driverName) {
      if (!confirm(`Cancel link for ${driverName}?`)) return;

      fetch('/cancel-link', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ driverName })
      })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          updateDriverBox(driverName, null);
          if (driverName === currentDriverName) {
            document.getElementById('messageArea').classList.add('hidden');
          }
        } else {
          alert('Failed to cancel link.');
        }
      });
    }

    function updateDriverBox(driverName, trackingUrl) {
      const id = 'driverBox-' + driverName.replace(/\s+/g, '-');
      const box = document.getElementById(id);
      if (!box) return;

      const infoElements = box.querySelectorAll('div.mt-2, p.text-sm.text-gray-500');
      infoElements.forEach(el => el.remove());

      const info = document.createElement('div');
      info.className = 'mt-2 text-sm';

      if (trackingUrl) {
        if (trackingUrl) {
        const uniqueId = `expires-${driverName.replace(/\s+/g, '-')}`;

        info.innerHTML = `
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-2 sm:space-y-0 sm:space-x-2 mt-2">
            <div class="flex space-x-2">
                <button onclick="copyDriverLink('${trackingUrl}')" class="text-xs bg-blue-500 hover:bg-blue-600 text-white px-2 py-1 rounded">Copy</button>
                <button onclick="window.open('${trackingUrl}', '_blank')" class="text-xs bg-indigo-500 hover:bg-indigo-600 text-white px-2 py-1 rounded">Open</button>
                <button onclick="cancelDriverLink('${driverName}')" class="text-xs bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded">Cancel</button>
            </div>
            </div>
        `;
        }


      } else {
        info.innerHTML = `<p class="text-sm text-gray-500 mt-2 italic">No tracking link</p>`;
      }

      box.appendChild(info);
    }

    function filterDrivers() {
      const searchValue = document.getElementById('driverSearch').value.toLowerCase();
      document.querySelectorAll('.driver-card').forEach(card => {
        const name = card.dataset.name;
        card.style.display = name.includes(searchValue) ? 'block' : 'none';
      });
    }

    function updateCountdowns() {
    const now = new Date();
    document.querySelectorAll('[data-expiry]').forEach(el => {
      const expiry = new Date(el.getAttribute('data-expiry'));
      const diffMs = expiry - now;

      if (diffMs <= 0) {
        el.querySelector('.countdown').textContent = 'Expired';
        return;
      }

      const diffMinutes = Math.floor(diffMs / 1000 / 60);
      const hours = Math.floor(diffMinutes / 60);
      const minutes = diffMinutes % 60;

      el.querySelector('.countdown').textContent = `${hours}h ${minutes}m`;
    });
  }

  // Initial call and refresh every minute
  updateCountdowns();
  setInterval(updateCountdowns, 60000);

  </script>
</body>
</html>
